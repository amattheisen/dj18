# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "base"
  config.vm.box = "centos/7"
  config.vm.define "dj18" do |dj18|
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # Forward tcstool web port
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 22, host: 2222

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.

  # Virtualbox specific customizations
  config.vm.provider "virtualbox" do |vb|
    # Customize the amount of memory and CPUs for the VM:
    vb.memory = "1048"
    vb.cpus = "1"
  end
 
  config.vm.hostname = "dj18"
  config.vm.post_up_message = "dj18 VM is running!\nConnect with or ssh -p 2222 andrew@localhost \nview tool at http://localhost:8080/"

  config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
  config.vm.provision "file", source: "../requirements.pip", destination: "requirements.pip"
  config.vm.provision "file", source: "../requirements.yum", destination: "requirements.yum"
  config.vm.provision "file", source: "~/.ssh/id_rsa.pub", destination: "host_id_rsa.pub"
  config.vm.provision "file", source: "../screenrc", destination: "screenrc"
  config.vm.provision "file", source: "../app.py", destination: "app.py"
  config.vm.provision "file", source: "../bashrc", destination: "bashrc"
  config.vm.provision "file", source: "../htaccess", destination: "htaccess"
  config.vm.provision "file", source: "../basesite.fcgi", destination: "basesite.fcgi"

  # For those VIMmers out there
  config.vm.provision "file", source: "~/.vimrc", destination: ".vimrc"
  config.vm.provision "file", source: "~/.vim", destination: ".vim"

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  dj18_version = ENV['DJ18_RELEASE'].nil? ? '1.0.0' : ENV['DJ18_RELEASE']
  config.vm.provision "shell", inline: "cd /vagrant; DJ18_RELEASE=#{dj18_version} ./install.sh"
end
